#!/bin/bash

#
# @description  Website analytics tool.
# @author	Marcelo Corrêa <macorrea-@hotmail.com>
# @requires     dig v9.18+, curl v8.1+, bash 5.1+
# @version	0.0.2
#

#
# Define constants variables
#
BLUE='\033[34m'
PINK='\033[35m'
CYAN_B='\033[30;46m'
WHITE_BACKGROUND='\033[30;47m'
DEFAULT_COLOR='\033[0m'
VERSION='0.0.2'

#
# Methods
#
function showHelp() {
    read -r -d '' help <<EOF
usage: analytx [DOMAIN] 
       analytx [COMMAND] [ARGS]

Available commands:

help                        Show this help

Use "analytx --help" for more information about a command.
EOF

    echo "${help}"

}

function logo() {
    echo -e "${PINK}"
    echo " ______     __   __     ______     __         __  __     ______   __  __    "
    echo "/\\  __ \\   /\\ \"-.\\ \\   /\\  __ \\   /\\ \\       /\\ \\_\\ \\   /\\__  _\\ /\\_\\_\\_\\   "
    echo "\\ \\  __ \\  \\ \\ \\-.  \\  \\ \\  __ \\  \\ \\ \\____  \\ \\____ \\  \\/_/\\ \\/ \\/_/\\/_/_  "
    echo " \\ \\_\\ \\_\\  \\ \\_\\\\\"\\_\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\/\\_____\\    \\ \\_\\  /\\/_\\/\\_\\ "
    echo "  \\/_/\\/_/   \\/_/ \\/_/   \\/_/\\/_/   \\/_____/   \\/_____/     \\/_/   \\/_/\\/_/ "
    echo -e "\n${WHITE_BACKGROUND}                                                              version ${VERSION} ${DEFAULT_COLOR}"
}

function loadingQueries() {
    local bars=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    while true; do
        for i in "${bars[@]}"; do
            echo -ne "\r"
            echo -ne "${CYAN_B} \r Analyzing $i ${DEFAULT_COLOR} ${domain} "
            sleep 0.08
        done
    done
}

function isDomainRegistered() {
    if [[ $1 == *"No match"* ]]; then
        whois_status="Not registered"
        return 0
    fi
    whois_status="Registered"
    return 1
}

function getDomainDnsEntries() {
    A=$(dig "${domain}" +short A | grep -v "Warning: Client COOKIE mismatch" || echo "Unknown")
    NS=$(dig "${domain}" +short NS | grep -v "Warning: Client COOKIE mismatch" || echo "Unknown")
    MX=$(dig "${domain}" +short MX | grep -v "Warning: Client COOKIE mismatch" || echo "Unknown")
    return 0
}

function getDomainInfo() {
    whois_output=$(whois "$domain")
    isDomainRegistered "${whois_output}"

    if echo "${domain}" | grep -q "\.br$"; then
        owner=$(echo "${whois_output}" | grep -i -m 1 "owner:" | sed 's/owner://I' | awk '{$1=$1};1')
        owner_id=$(echo "${whois_output}" | grep -i -m 1 "ownerid:" | sed 's/ownerid://I' | awk '{$1=$1};1')
        person=$(echo "${whois_output}" | grep -i -m 1 "person:" | sed 's/person://I' | awk '{$1=$1};1')
        user_email=$(echo "${whois_output}" | grep -i -m 1 "e-mail:" | sed 's/e-mail://I' | awk '{$1=$1};1')
        date=$(echo "${whois_output}" | grep -i -m 1 "expires" | sed 's/expires://I' | awk '{$1=$1};1')
        expiration_date=$(date -d "${date:0:4}-${date:4:2}-${date:6:2}" '+%Y-%m-%d')
    else 
        registrar=$(echo "${whois_output}" | grep -i -m 1 "Registrar:" | sed 's/Registrar://I' | awk '{$1=$1};1')
        registrant=$(echo "${whois_output}" | awk -F ':' '/Registrant Name/{print $2}' | sed 's/^\s*//')
        expiration_date=$(echo "${whois_output}" | awk -F ':' '/Registry Expiry Date/{print $2}' | sed 's/^\s*//')
    fi
}

function checkCertificateStatus() {
    ssl_status=$(openssl s_client -connect "${domain}:443" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -noout -checkend 0 || echo "Unknown")
    ssl_issuer=$(openssl s_client -connect "${domain}:443" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -noout -issuer || echo "Unknown")
    ssl_dates=$(openssl s_client -connect "${domain}:443" -servername "${domain}" < /dev/null 2>/dev/null | openssl x509 -noout -dates | tr -d "\n" || echo "Unknown")
    return 0
}

function checkPageload() {
    pageload=$(curl -s -w 'Lookup Time:\t\t\t%{time_namelookup}\nConnect Time:\t\t\t%{time_connect}\nPre-transfer Time:\t\t%{time_pretransfer}\nStart-transfer Time:\t\t%{time_starttransfer}\n\nTotal Time:\t\t\t%{time_total}\n' -o /dev/null "${domain}")
    return 0
}

function printDnsRecordsA() {
    echo -e "${BLUE}A Record${DEFAULT_COLOR}"

    A=$(echo "$A" | tr '\n' ' ')
    IFS=' ' read -r -a entriesArray <<< "$A"

    for i in "${!entriesArray[@]}"; do
        index=$((i + 1))
        if [ "$i" -ne $(( ${#entriesArray[@]} - 1 )) ]; then
            echo -e "Entry $index:\t\t\t${entriesArray[i]}"
        else 
            echo -e "Entry $index:\t\t\t${entriesArray[i]}\n"
        fi
    done
}

function printDnsRecordsNS() {
    echo -e "${BLUE}NS Record${DEFAULT_COLOR}"

    NS=$(echo "$NS" | tr '\n' ' ')
    IFS=' ' read -r -a entriesArray <<< "$NS"

    for i in "${!entriesArray[@]}"; do
        index=$((i + 1))
        if [ "$i" -ne $(( ${#entriesArray[@]} - 1 )) ]; then
            echo -e "Entry $index:\t\t\t${entriesArray[i]}"
        else 
            echo -e "Entry $index:\t\t\t${entriesArray[i]}\n"
        fi
    done
}

function printDnsRecordsMX() {
    echo -e "${BLUE}MX Record${DEFAULT_COLOR}"

    MX=$(echo "$MX" | tr '\n' ' ')
    IFS=' ' read -r -a entriesArray <<< "$MX"

    for i in "${!entriesArray[@]}"; do
        index=$((i + 1))
        if [ "$i" -ne $(( ${#entriesArray[@]} - 1 )) ]; then
            echo -e "Entry $index:\t\t\t${entriesArray[i]}"
        else 
            echo -e "Entry $index:\t\t\t${entriesArray[i]}\n"
        fi
    done
}

function printDomainInfo() {
    echo -e "${BLUE}Domain Information${DEFAULT_COLOR}"
    echo -e "Status:\t\t\t\t${whois_status}"
    if echo "${domain}" | grep -q "\.br$"; then
        echo -e "Owner:\t\t\t\t${owner}"
        echo -e "E-mail:\t\t\t\t${user_email}"
        echo -e "Person:\t\t\t\t${person}"
        echo -e "User ID:\t\t\t${owner_id}"
        echo -e "Expires:\t\t\t${expiration_date}"
    else
        echo -e "Registrar:\t\t\t${registrar}"
        echo -e "Registrant:\t\t\t${registrant}"
        echo -e "Expires:\t\t\t${expiration_date}"
    fi
    
    if [ "$whois_status" == "Registered" ]; then
        echo -e "Access:\t\t\t\t\e[4mwww.${domain}\e[0m\n"
    fi
}

function printDomainCertificate() {
    echo -e "${BLUE}SSL Certificate${DEFAULT_COLOR}"
    echo -e "Status:\t\t\t\t${ssl_status}"
    echo -e "Issuer:\t\t\t\t${ssl_issuer}"
    echo -e "Date:\t\t\t\t${ssl_dates}\n"
}

function printPageload() {
    echo -e "${BLUE}Page Load${DEFAULT_COLOR}\n${pageload}"
}

function closeProgram() {
    echo -e "\e[?25h"
    # Add any cleanup or exit actions here, if needed.
    exit 1
}

function updateAnalytx(){

    local currentDir
    currentDir=$(pwd)

    cd "$HOME/.config/analytx" || return

    git pull

    cd "$currentDir" || return

}

#
# Parse argument
#
domain=$1
domain="${domain#https://}"
domain="${domain#http://}"

if [[ $1 == '' ]]; then
    showHelp
    exit
fi

if [[ $1 == 'update' ]]; then
    updateAnalytx
    kill $$
fi

#
# Display program logo
#
logo
echo -e "\e[?25l"
trap closeProgram SIGINT

#
# Methods call 
#
loadingQueries &
loadindProcessPid=$!
getDomainDnsEntries
getDomainInfo
checkCertificateStatus
checkPageload

#
# Printing domain info
#
kill $loadindProcessPid
echo -ne "\r"
echo -ne "${CYAN_B} \r Completed ✔ ${DEFAULT_COLOR} ${domain}\n\n"
printDnsRecordsA
printDnsRecordsNS
printDnsRecordsMX
printDomainInfo
printDomainCertificate
printPageload

echo -e "\e[?25h"
